---
import "./bootstrap.min.css";
import { Breadcrumb, Navbar } from "astro-bootstrap";
import type { NavbarItemType } from "astro-bootstrap";
import { arborescence_cours } from "../lib/files";
// import {ViewTransitions} from "astro:transitions"

interface Props {
    title: string;
}

const { title } = Astro.props;

const items: NavbarItemType[] = [
    // pull this in from a config file
    {
        text: "Accueil",
        href: import.meta.env.BASE_URL,
        linkClass: Astro.url.pathname == import.meta.env.BASE_URL + "/" ? "active" : ""
    },
    {
        text: "Fiches",
        href: import.meta.env.BASE_URL + "/ues",
        linkClass: Astro.url.pathname.startsWith(import.meta.env.BASE_URL + "/ues") ? "active" : ""
    },
    { text: "QCMs", href: import.meta.env.BASE_URL + "/qcms" }
];

const breadcrumbs: { name: string, url: string }[] = [];

let path = Astro.url.pathname.replace(import.meta.env.BASE_URL, "").split("/");
if (path[0] === "") {
    path.shift();
}
if (path.length >= 0) {
    // breadcrumbs.push({name: "Accueil", url: import.meta.env.BASE_URL})
}
console.log(path);
if (path.length >= 1) {
    if (path[0] === "ues") {
        breadcrumbs.push({ name: "UEs", url: import.meta.env.BASE_URL + "/ues" });
        if (path.length >= 2) {
            let ue = arborescence_cours.find(ue => ue.id === path[1])!;
            breadcrumbs.push({ name: ue.name, url: import.meta.env.BASE_URL + `/ues/${ue.id}` });
            if (path.length >= 3) {
                let theme = ue.themes.find(theme => theme.id === path[2])!;
                breadcrumbs.push({ name: theme.name, url: import.meta.env.BASE_URL + `/ues/${ue.id}/${theme.id}` });
                if (path.length >= 4) {
                    let cours = theme.cours.find(cours => cours.id === path[3])!;
                    breadcrumbs.push({
                        name: cours.name,
                        url: import.meta.env.BASE_URL + `/ues/${ue.id}/${theme.id}/${cours.id}`
                    });
                }
            }
        }
    } else {
        console.log("Todo breadcrumbs");
    }
}
const navBarId = "navbarTogglerTarget";
---

<!doctype html>
<html lang="fr">
<head>
    <meta charset="UTF-8"/>
    <meta name="description" content="Fiches de cours de mÃ©decine"/>
    <meta name="viewport" content="width=device-width"/>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg"/>
    <meta name="generator" content={Astro.generator}/>
    <base href={Astro.url.pathname + "/"}/>
    <!--<ViewTransitions/>-->
    <title>{title}</title>
</head>
<body>
<header class="pt-0 px-0 ">
    <Navbar class="navbar navbar-expand-lg bg-primary mb-4 " data-bs-theme="dark">
        <Navbar.Toggler controls={navBarId}/>
        <Navbar.Collapse id={navBarId}>
            <div class="container-fluid ms-5 navbar-nav">
                <a class="navbar-brand" href="#">Fiches medecine lol</a>
                <Navbar.Items items={items} class="me-auto mb-2 mb-lg-0"/>
            </div>
            <div id="searchbox" transition:animate="none" transition:name="search"
                 class="form-inline mb-lg-0 w-75 d-flex ms-auto me-5">
            </div>
        </Navbar.Collapse>
    </Navbar>
    <div class="ms-5 mb-4 form-inline">
        <Breadcrumb>
            {breadcrumbs.map(breadcrumb => (
                <Breadcrumb.Item><a href={breadcrumb.url}>{breadcrumb.name}</a></Breadcrumb.Item>
            ))}
        </Breadcrumb>
    </div>
</header>
<main class="mx-md-5 mx-2">
    <slot/>
</main>
</body>
</html>
<script>

    import "bootstrap/dist/js/bootstrap.bundle";
    import { liteClient as algoliaSearch } from "algoliasearch/lite";
    import { autocomplete, getAlgoliaResults } from "@algolia/autocomplete-js";
    import type { AutocompleteSource } from "@algolia/autocomplete-js";
    import "@algolia/autocomplete-theme-classic";
    import { ALGOLIA_APP_ID, ALGOLIA_SEARCH_KEY } from "astro:env/client";
    import { pagesIndexName } from "../lib/pagesIndexName";

    const searchClient = algoliaSearch(
        ALGOLIA_APP_ID,
        ALGOLIA_SEARCH_KEY
    );

    // document.addEventListener("astro:after-swap", () => {
    //     // currentAutoComplete.destroy()
    //     // currentAutoComplete.refresh()
    //     attachSearch(document.getElementById("searchbox")!)
    // })
    attachSearch(document.getElementById("searchbox")!);

    function attachSearch(element: HTMLElement) {

        autocomplete({
            container: element,
            placeholder: "Rechercher une fiche",
            openOnFocus: true,
            // plugins: [redirectUrlPlugin],
            insights: true,
            getSources({ query }) {
                let newVar: AutocompleteSource<any> = {
                    sourceId: "pages",
                    getItems() {
                        return getAlgoliaResults({
                            searchClient,
                            queries: [
                                {
                                    indexName: pagesIndexName,
                                    params: {
                                        query,
                                        hitsPerPage: 5
                                    }
                                }
                            ]
                        });
                    },
                    getItemUrl({ item }) {
                        return item.url;
                    },
                    getItemInputValue({ item }) {
                        return item.name;
                    },
                    templates: {
                        item({ item, components, html }) {
                            return html`
                                <a class="aa-ItemLink d-block" href=${import.meta.env.BASE_URL + item.url}>
                                    <div class="aa-ItemWrapper">
                                        <div class="aa-ItemContent">
                                            <div class="aa-ItemContentBody">
                                                <div class="aa-ItemContentTitle">
                                                    ${components.Highlight({
                                                        hit: item,
                                                        attribute: "name"
                                                    })}
                                                </div>
                                                <div class="aa-ItemContentDescription">
                                                    ${components.Snippet({
                                                        hit: item,
                                                        attribute: "type"
                                                    })}
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </a>
                            `;
                        }
                    }

                };
                return [
                    newVar
                ];
            }
        });
    }


</script>
<style is:global>

    input, .form-check-input {
        border: 1pt solid black;
    }

    .aa-Autocomplete {
        width: 100% !important;
    }

    .aa-ItemContentTitle {
        font-size: 1rem;
    }
</style>