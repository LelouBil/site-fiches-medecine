---
import {arborescence_cours} from "@/lib/files";
import Layout from "@/layouts/Layout.astro";
import MainHeader from "../../../../components/MainHeader.astro";
import {defaultFilters} from "../../../../lib/qcmFilters";
import QCMWrapper from "../../../../components/QCMWrapper.astro";
export function getStaticPaths() {
    // for each ue and theme and cours pair
    return arborescence_cours.flatMap((ue) => {
        return ue.themes.flatMap((theme) => {
            return theme.cours.map((cours) => {
                return {params: {ue_id: ue.id, theme_id: theme.id, cours_id: cours.id}}
            })
        })
    })
}

const {ue_id, theme_id, cours_id} = Astro.params;
const ue = arborescence_cours.find(ue => ue.id === ue_id)!;
const theme = ue.themes.find(theme => theme.id === theme_id)!;
const cours = theme.cours.find(cours => cours.id === cours_id)!;
---

<Layout title=`${cours.name}`>
    <MainHeader>{cours.name}</MainHeader>
    <hr class="mb-5 "/>
    <h3>Fiches </h3>
    {cours.fiches.map(fiche => (
            <div class="card mb-3" id={fiche.id}>
                <div class="card-body d-flex flex-column justify-content-center align-content-center align-items-center py-2">
                    <a href={fiche.download_url}
                       class="btn btn-primary btn-mg btn-block my-3 btn-download"><mark class="text-info text-bg-primary">Télécharger</mark> {fiche.name}</a>
                    <a data-modal-id={`#modal-${fiche.id}`}
                       class="btn btn-outline-primary d-inline-block mx-auto">
                        Afficher l'aperçu du PDF
                    </a>

                    <div tabindex="-1" class="modal fade" id={`modal-${fiche.id}`}>
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content p-0 m-0 pdf-modal  border border-primary border-5">
                                <div class="modal-body p-0 m-0 w-100 h-100">
                                    <object data={fiche.embed_url} type="application/pdf"
                                            class="w-100 h-100">
                                        <p>Impossible d'afficher l'apercu <a href={fiche.download_url}>Télécharger le
                                            PDF</a>.</p>
                                    </object>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
    ))}

    <QCMWrapper

            defaultQuestionCount={10}
            preSetFilters={{
                ...defaultFilters,
                context: `le cours`,
                included_cours: new Set([cours.id])
            }}/>

    <div id="questions" class="mt-5">
        <!-- Future questions will be added here -->
    </div>
</Layout>

<style>

    .btn-download {
        width: 50%;
    }

    .modal, .modal-dialog {
        max-width: unset !important;
        max-height: unset !important;
        justify-content: center;
    }

    .pdf-modal {
        width: 60vw;
        height: 90vh;
    }


    @media screen and (max-width: 768px) {
        .pdf-modal {
            width: 90vw;
            height: 90vh;
        }
        .btn-download {
            width: auto;
        }
    }

</style>

<script>

    import {Modal} from 'bootstrap'


    let currentmodal: Modal | null = null

    // get all fiche- modal
    const modalComps = [...document.querySelectorAll('.modal')]
    modalComps.forEach(modal => {
        modal.addEventListener('hidden.bs.modal', () => {
            if(currentmodal == null) return
            const url = new URL(document.location.toString())
            url.hash = ''
            window.history.back()
            currentmodal = null
        })
    })
    const modals: {
        [key: string]: Modal
    } = modalComps.reduce((acc, modal) => Object.assign(acc, {[modal.id]: Modal.getOrCreateInstance(modal)}), {})


    //get all modal buttons
    const modalButtons = [...document.querySelectorAll('[data-modal-id]')]
    modalButtons.forEach(button => {
        button.addEventListener('click', () => {
            let modal_id = (button! as HTMLElement).dataset.modalId?.slice(1);
            const modal = modal_id && modals[modal_id]
            if (modal) {
                console.log(`showing ${modal}`)
                modal.show()
                const url = new URL(document.location.toString())
                url.hash = modal_id
                window.history.pushState({}, '', `${url}`)
                currentmodal = modal
            }
        })
    })

    // popstate event
    window.addEventListener('popstate', () => {
        if (currentmodal) {
            console.log(`hiding ${currentmodal}`)
            const old = currentmodal
            currentmodal = null
            old.hide()
        }
    })

    window.addEventListener('hashchange', () => {
        if (!currentmodal) {
            const url = new URL(document.location.toString())
            let modal_id = url.hash.slice(1);
            const modalElem = modals[modal_id]
            if (modalElem) {
                console.log(`showing ${modalElem}`)
                modalElem.show()
                currentmodal = modalElem
            }
        }
    })

    const url = new URL(document.location.toString())
    let modal_id = url.hash.slice(1);
    const modalElem = modals[modal_id]
    if (modalElem) {
        console.log(`showing ${modalElem}`)
        modalElem.show()
        window.history.replaceState({modal: modal_id}, '', `${url}`)
        currentmodal = modalElem
    } else {
        window.history.replaceState({modal: null}, '', `${url}`)
        currentmodal = null
    }


</script>